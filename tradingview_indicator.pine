//@version=5
indicator("F&O OI Changes", overlay=false, tooltip="Изменения открытого интереса для фьючерсов F&O")

// Настройки индикатора
//@version=5
indicator("F&O OI Changes", overlay=false, tooltip="Изменения открытого интереса для фьючерсов F&O")

// Настройки индикатора
var string apiUrl = input.string("https://dhan-oi-api.onrender.com/tv_data", "API URL", group="Настройки")
var string symbol = input.string("NIFTY", "Символ (например: NIFTY, BANKNIFTY, RELIANCE, INFY, и т.д.)", group="Настройки")
var int updateInterval = input.int(60, "Интервал обновления (сек)", minval=10, group="Настройки")
var bool showErrorLabels = input.bool(true, "Показывать сообщения об ошибках", group="Настройки")

// ИНСТРУКЦИЯ ДЛЯ НАСТРОЙКИ WEBHOOK
// 1. В TradingView Pro перейдите в "Настройки" -> "Webhooks"
// 2. Создайте webhook с URL: 
//    https://dhan-oi-api.onrender.com/tv_data?symbol={{СИМВОЛ}}
//    где {{СИМВОЛ}} замените на выбранный символ, например NIFTY или RELIANCE
// 
// Или используйте переменную из настроек индикатора:
//    https://dhan-oi-api.onrender.com/tv_data?symbol={{plot("symbol")}}
//
// 3. В ответе с сервера используйте эти маппинги:
//    api_status = $.status
//    api_error = $.error
//    oi_15min_change = $.intervals.15min.oi_change_pct
//    oi_45min_change = $.intervals.45min.oi_change_pct
//    oi_75min_change = $.intervals.75min.oi_change_pct
//    oi_2hours_change = $.intervals.2hours.oi_change_pct
//    oi_4hours_change = $.intervals.4hours.oi_change_pct

// Структура для хранения данных OI
type OIData
    float oi
    float change
    color textColor

// Создаем экземпляры данных для разных временных интервалов
var OIData data15min = OIData.new(0.0, 0.0, color.gray)
var OIData data45min = OIData.new(0.0, 0.0, color.gray)
var OIData data75min = OIData.new(0.0, 0.0, color.gray)
var OIData data2hours = OIData.new(0.0, 0.0, color.gray)
var OIData data4hours = OIData.new(0.0, 0.0, color.gray)

// Переменные для отслеживания ошибок
var bool hasError = false
var string errorMessage = ""

// Функция для определения цвета на основе изменения OI
getOIColor(float change) =>
    change > 0 ? color.green : color.red

// Переменные для отслеживания времени последнего обновления
var int lastUpdateTime = 0

// Проверяем, нужно ли обновить данные
bool shouldUpdate = timenow - lastUpdateTime >= updateInterval * 1000

// Запрос к API только при необходимости обновления через webhook
if shouldUpdate
    // Реальный код работы с webhook в TradingView Pro
    // URL webhook должен быть:
    //   https://dhan-oi-api.onrender.com/tv_data?symbol=СИМВОЛ
    //   где СИМВОЛ - это значение из настроек индикатора или конкретный символ, например NIFTY
    //
    // Webhook вернет JSON в формате:
    // {
    //   "symbol": "NIFTY",
    //   "current_oi": 12345,
    //   "intervals": {
    //     "15min": {"oi": 12345, "oi_change_pct": -1.23},
    //     "45min": {"oi": 12345, "oi_change_pct": -0.89},
    //     "75min": {"oi": 12345, "oi_change_pct": -0.56},
    //     "2hours": {"oi": 12345, "oi_change_pct": 0.34},
    //     "4hours": {"oi": 12345, "oi_change_pct": -0.12}
    //   },
    //   "status": "success",
    //   "last_update": 1234567890
    // }
    //
    // Или в случае ошибки:
    // {
    //   "error": "No OI data available for СИМВОЛ", 
    //   "symbol": "СИМВОЛ",
    //   "status": "error",
    //   "error_code": "NO_DATA"
    // }
    
    // Экспортируем значение символа для использования в webhook
    plot(0, "symbol", display=display.none, editable=false)
    
    // По умолчанию предполагаем, что данные отсутствуют
    float oi_15min_change = na
    float oi_45min_change = na
    float oi_75min_change = na
    float oi_2hours_change = na
    float oi_4hours_change = na
    float current_oi = na
    
    // В реальном сценарии здесь придут данные с webhook
    // Данные будут автоматически доступны через переменные после вызова webhook:
    // oi_15min_change = OI изменение за 15 минут
    // oi_45min_change = OI изменение за 45 минут
    // ...и т.д. для всех интервалов
    // api_status = "success" или "error"
    // api_error = сообщение об ошибке от API
    
    // Проверяем, получены ли данные (это примеры переменных из webhook)
    string api_status = "success"  // Это будет заполнено webhook'ом автоматически
    string api_error = ""  // Это будет заполнено webhook'ом при ошибке
    
    if api_status == "success"
        // Обновляем данные (эти переменные будут заполнены webhook'ом)
        current_oi = 12345  // Пример значения, будет заменено реальными данными
        oi_15min_change = -1.23  // Пример значения, будет заменено реальными данными
        oi_45min_change = -0.89  // Пример значения, будет заменено реальными данными
        oi_75min_change = -0.56  // Пример значения, будет заменено реальными данными
        oi_2hours_change = 0.34  // Пример значения, будет заменено реальными данными
        oi_4hours_change = -0.12  // Пример значения, будет заменено реальными данными
        
        // Обновляем данные и цвета
        hasError := false
        errorMessage := ""
        
        // Обновляем структуры данных
        data15min.change := oi_15min_change
        data15min.textColor := getOIColor(data15min.change)
        
        data45min.change := oi_45min_change
        data45min.textColor := getOIColor(data45min.change)
        
        data75min.change := oi_75min_change
        data75min.textColor := getOIColor(data75min.change)
        
        data2hours.change := oi_2hours_change
        data2hours.textColor := getOIColor(data2hours.change)
        
        data4hours.change := oi_4hours_change
        data4hours.textColor := getOIColor(data4hours.change)
    else
        // Ошибка API
        hasError := true
        errorMessage := api_error != "" ? api_error : "Ошибка API: Данные недоступны для " + symbol
    
    // Обновляем время последнего обновления
    lastUpdateTime := timenow

// Отрисовка таблицы
var table dataTable = table.new(position.top_right, 5, 6, border_width=1)

// Отображение сообщения об ошибке на графике
if barstate.islast and hasError and showErrorLabels
    label.new(bar_index, high, text=errorMessage, style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

// Обновляем заголовки таблицы
if barstate.islast
    table.cell(dataTable, 0, 0, symbol, bgcolor=color.blue, text_color=color.white)  // Показываем выбранный символ
    table.cell(dataTable, 1, 0, "Change in price", bgcolor=color.gray, text_color=color.white)
    table.cell(dataTable, 2, 0, "Change in OI", bgcolor=color.gray, text_color=color.white)
    table.cell(dataTable, 3, 0, "Rvol", bgcolor=color.gray, text_color=color.white)
    table.cell(dataTable, 4, 0, "Relationship", bgcolor=color.gray, text_color=color.white)
    
    // Если есть ошибка, отображаем сообщение в таблице
    if hasError
        table.cell(dataTable, 0, 1, "ERROR", bgcolor=color.red, text_color=color.white)
        table.cell(dataTable, 1, 1, errorMessage, bgcolor=color.red, text_color=color.white, width=4)
    else
        // Строка для 15min
        table.cell(dataTable, 0, 1, "15min", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 1, str.tostring(0.24) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 1, str.tostring(data15min.change) + "%", bgcolor=color.black, text_color=data15min.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 1, "0.28", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 1, "", bgcolor=data15min.textColor, text_color=color.white)
        
        // Строка для 45min
        table.cell(dataTable, 0, 2, "45min", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 2, str.tostring(0.58) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 2, str.tostring(data45min.change) + "%", bgcolor=color.black, text_color=data45min.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 2, "0.7", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 2, "", bgcolor=data45min.textColor, text_color=color.white)
        
        // Строка для 75min
        table.cell(dataTable, 0, 3, "75min", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 3, str.tostring(0.61) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 3, str.tostring(data75min.change) + "%", bgcolor=color.black, text_color=data75min.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 3, "0.35", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 3, "", bgcolor=data75min.textColor, text_color=color.white)
        
        // Строка для 2hours
        table.cell(dataTable, 0, 4, "2hours", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 4, str.tostring(0.77) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 4, str.tostring(data2hours.change) + "%", bgcolor=color.black, text_color=data2hours.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 4, "0.74", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 4, "", bgcolor=data2hours.textColor, text_color=color.white)
        
        // Строка для 4hours
        table.cell(dataTable, 0, 5, "4hours", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 5, str.tostring(0.53) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 5, str.tostring(data4hours.change) + "%", bgcolor=color.black, text_color=data4hours.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 5, "0.9", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 5, "", bgcolor=data4hours.textColor, text_color=color.white)

// Этот индикатор не отображает никаких линий на графике
plot(na) 