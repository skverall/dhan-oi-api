//@version=5
indicator("F&O OI Changes", overlay=true)

// Indicator Settings
var string apiUrl = input.string("https://dhan-oi-api.onrender.com/tv_data", "API URL", group="Settings")
// Use current chart symbol, but allow overriding it through settings (if needed)
var bool useChartSymbol = input.bool(true, "Use chart symbol", group="Settings", tooltip="If enabled, current chart symbol is always used. If disabled, the symbol below is used.")
var string customSymbol = input.string("NIFTY", "Symbol (if not using chart symbol)", group="Settings", tooltip="Used only if 'Use chart symbol' is disabled")
var int updateInterval = input.int(60, "Update interval (sec)", minval=10, group="Settings")
var bool showErrorLabels = input.bool(true, "Show error messages", group="Settings")

// Determine the actual symbol to use
string symbol = useChartSymbol ? syminfo.ticker : customSymbol

// WEBHOOK SETUP INSTRUCTIONS
// 1. In TradingView Pro, go to "Settings" -> "Webhooks"
// 2. Create a webhook with URL: 
//    https://dhan-oi-api.onrender.com/tv_data?symbol={{ticker}}
//
// 3. In the server response, use these mappings:
//    api_status = $.status
//    api_error = $.error
//    oi_15min_change = $.intervals.15min.oi_change_pct
//    oi_45min_change = $.intervals.45min.oi_change_pct
//    oi_75min_change = $.intervals.75min.oi_change_pct
//    oi_2hours_change = $.intervals.2hours.oi_change_pct
//    oi_4hours_change = $.intervals.4hours.oi_change_pct

// Structure for storing OI data
type OIData
    float oi
    float change
    color textColor

// Create data instances for different time intervals
var OIData data15min = OIData.new(0.0, 0.0, color.gray)
var OIData data45min = OIData.new(0.0, 0.0, color.gray)
var OIData data75min = OIData.new(0.0, 0.0, color.gray)
var OIData data2hours = OIData.new(0.0, 0.0, color.gray)
var OIData data4hours = OIData.new(0.0, 0.0, color.gray)

// Variables for tracking errors
var bool hasError = false
var string errorMessage = ""

// Function to determine color based on OI change
getOIColor(float change) =>
    change > 0 ? color.green : color.red

// Variables for tracking the last update time
var int lastUpdateTime = 0

// Variables for OI data (global)
var float current_oi = na
var float oi_15min_change = na
var float oi_45min_change = na
var float oi_75min_change = na
var float oi_2hours_change = na
var float oi_4hours_change = na

// Check if data needs to be updated
bool shouldUpdate = timenow - lastUpdateTime >= updateInterval * 1000

// Request to API only when update is needed via webhook
if shouldUpdate
    // Real webhook code in TradingView Pro
    // Webhook URL should be:
    //   https://dhan-oi-api.onrender.com/tv_data?symbol={{ticker}}
    //   The indicator automatically uses the current chart ticker
    //
    // Webhook will return JSON in format:
    // {
    //   "symbol": "NIFTY",
    //   "current_oi": 12345,
    //   "intervals": {
    //     "15min": {"oi": 12345, "oi_change_pct": -1.23},
    //     "45min": {"oi": 12345, "oi_change_pct": -0.89},
    //     "75min": {"oi": 12345, "oi_change_pct": -0.56},
    //     "2hours": {"oi": 12345, "oi_change_pct": 0.34},
    //     "4hours": {"oi": 12345, "oi_change_pct": -0.12}
    //   },
    //   "status": "success",
    //   "last_update": 1234567890
    // }
    //
    // Or in case of error:
    // {
    //   "error": "No OI data available for SYMBOL", 
    //   "symbol": "SYMBOL",
    //   "status": "error",
    //   "error_code": "NO_DATA"
    // }
    
    // By default, we assume data is missing
    
    // In real scenario, data will come from webhook
    // Data will be automatically available through variables after webhook call:
    // oi_15min_change = OI change over 15 minutes
    // oi_45min_change = OI change over 45 minutes
    // ...etc. for all intervals
    // api_status = "success" or "error"
    // api_error = error message from API
    
    // Check if data was received (these are example variables from webhook)
    string api_status = "success"  // This will be filled by webhook automatically
    string api_error = ""  // This will be filled by webhook in case of error
    
    if api_status == "success"
        // Update data (these variables will be filled by webhook)
        current_oi := 12345  // Example value, will be replaced with real data
        oi_15min_change := -1.23  // Example value, will be replaced with real data
        oi_45min_change := -0.89  // Example value, will be replaced with real data
        oi_75min_change := -0.56  // Example value, will be replaced with real data
        oi_2hours_change := 0.34  // Example value, will be replaced with real data
        oi_4hours_change := -0.12  // Example value, will be replaced with real data
        
        // Update data and colors
        hasError := false
        errorMessage := ""
        
        // Update data structures
        data15min.change := oi_15min_change
        data15min.textColor := getOIColor(data15min.change)
        
        data45min.change := oi_45min_change
        data45min.textColor := getOIColor(data45min.change)
        
        data75min.change := oi_75min_change
        data75min.textColor := getOIColor(data75min.change)
        
        data2hours.change := oi_2hours_change
        data2hours.textColor := getOIColor(data2hours.change)
        
        data4hours.change := oi_4hours_change
        data4hours.textColor := getOIColor(data4hours.change)
    else
        // API Error
        hasError := true
        errorMessage := api_error != "" ? api_error : "API Error: Data unavailable for " + symbol
    
    // Update last update time
    lastUpdateTime := timenow

// Draw table
var table dataTable = table.new(position.top_right, 5, 6, border_width=1)

// Display error message on chart
if barstate.islast and hasError and showErrorLabels
    label.new(bar_index, high, text=errorMessage, style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

// Update table headers
if barstate.islast
    table.cell(dataTable, 0, 0, symbol, bgcolor=color.blue, text_color=color.white)  // Show selected symbol
    table.cell(dataTable, 1, 0, "Change in price", bgcolor=color.gray, text_color=color.white)
    table.cell(dataTable, 2, 0, "Change in OI", bgcolor=color.gray, text_color=color.white)
    table.cell(dataTable, 3, 0, "Rvol", bgcolor=color.gray, text_color=color.white)
    table.cell(dataTable, 4, 0, "Relationship", bgcolor=color.gray, text_color=color.white)
    
    // If there's an error, display message in the table
    if hasError
        table.cell(dataTable, 0, 1, "ERROR", bgcolor=color.red, text_color=color.white)
        table.cell(dataTable, 1, 1, errorMessage, bgcolor=color.red, text_color=color.white, width=4)
    else
        // Row for 15min
        table.cell(dataTable, 0, 1, "15min", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 1, str.tostring(0.24) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 1, str.tostring(data15min.change) + "%", bgcolor=color.black, text_color=data15min.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 1, "0.28", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 1, "", bgcolor=data15min.textColor, text_color=color.white)
        
        // Row for 45min
        table.cell(dataTable, 0, 2, "45min", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 2, str.tostring(0.58) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 2, str.tostring(data45min.change) + "%", bgcolor=color.black, text_color=data45min.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 2, "0.7", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 2, "", bgcolor=data45min.textColor, text_color=color.white)
        
        // Row for 75min
        table.cell(dataTable, 0, 3, "75min", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 3, str.tostring(0.61) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 3, str.tostring(data75min.change) + "%", bgcolor=color.black, text_color=data75min.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 3, "0.35", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 3, "", bgcolor=data75min.textColor, text_color=color.white)
        
        // Row for 2hours
        table.cell(dataTable, 0, 4, "2hours", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 4, str.tostring(0.77) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 4, str.tostring(data2hours.change) + "%", bgcolor=color.black, text_color=data2hours.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 4, "0.74", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 4, "", bgcolor=data2hours.textColor, text_color=color.white)
        
        // Row for 4hours
        table.cell(dataTable, 0, 5, "4hours", bgcolor=color.gray, text_color=color.white)
        table.cell(dataTable, 1, 5, str.tostring(0.53) + "%", bgcolor=color.black, text_color=color.green)
        table.cell(dataTable, 2, 5, str.tostring(data4hours.change) + "%", bgcolor=color.black, text_color=data4hours.change > 0 ? color.green : color.red)
        table.cell(dataTable, 3, 5, "0.9", bgcolor=color.black, text_color=color.white)
        table.cell(dataTable, 4, 5, "", bgcolor=data4hours.textColor, text_color=color.white)

// This indicator doesn't display any lines on the chart
plot(na) 